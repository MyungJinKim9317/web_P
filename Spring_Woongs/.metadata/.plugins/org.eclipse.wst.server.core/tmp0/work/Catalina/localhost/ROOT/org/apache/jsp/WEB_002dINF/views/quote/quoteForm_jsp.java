/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-09-21 08:48:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.quote;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class quoteForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.1.0.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/smartEditorFolder/workspace/static/js/service/HuskyEZCreator.js\"\r\n");
      out.write("\tcharset=\"utf-8\">\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<form action=\"auoteInsert\" method=\"post\" name=\"write_b\" enctype=\"Multipart/form-data\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"post_no\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${post_no}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("\t\t<textarea name=\"detail\" id=\"ir1\" rows=\"10\" cols=\"100\"></textarea>\r\n");
      out.write("\t\t<input type=\"text\" placeholder=\"금액입력\" name=\"final_price\"> \r\n");
      out.write("\t\t<img src=\"\"> <br>\r\n");
      out.write("\t\t\t파일첨부 : <input type=\"file\" name=\"report\"> <br>\r\n");
      out.write("\t<!-- \t파일첨부 : <input type=\"file\" name=\"report\"> <br>\r\n");
      out.write("\t\t\t파일첨부 : <input type=\"file\" name=\"report\"> <br>\r\n");
      out.write(" \t\t\t웅이 다중파일 업로드랑 합치기로함 2개 주석처리해둠.\r\n");
      out.write("\t\t-->\r\n");
      out.write("\t\t<input type=\"submit\" value=\"저장\" id=\"save\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var oEditors = [];\r\n");
      out.write("$(function(){\r\n");
      out.write("      nhn.husky.EZCreator.createInIFrame({\r\n");
      out.write("          oAppRef: oEditors,\r\n");
      out.write("          elPlaceHolder: \"ir1\", //textarea에서 지정한 id와 일치해야 합니다. \r\n");
      out.write("          //SmartEditor2Skin.html 파일이 존재하는 경로\r\n");
      out.write(" sSkinURI: \"");
      out.print(request.getContextPath());
      out.write("/smartEditorFolder/workspace/static/SmartEditor2Skin.html\",\r\n");
      out.write("\t\t\t\t\thtParams : {\r\n");
      out.write("\t\t\t\t\t\t// 툴바 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t\t\t\t\tbUseToolbar : true,\r\n");
      out.write("\t\t\t\t\t\t// 입력창 크기 조절바 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t\t\t\t\tbUseVerticalResizer : true,\r\n");
      out.write("\t\t\t\t\t\t// 모드 탭(Editor | HTML | TEXT) 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t\t\t\t\tbUseModeChanger : true,\r\n");
      out.write("\t\t\t\t\t\tfOnBeforeUnload : function() {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tfOnAppLoad : function() {\r\n");
      out.write("\t\t\t\t\t\t//기존 저장된 내용의 text 내용을 에디터상에 뿌려주고자 할때 사용\r\n");
      out.write("\t\t\t\t\t\toEditors.getById[\"ir1\"].exec(\"PASTE_HTML\", [ \"\" ]);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tfCreator : \"createSEditor2\"\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t//저장버튼 클릭시 form 전송\r\n");
      out.write("\t\t$(\"#save\").click(function() {\r\n");
      out.write("\t\t\toEditors.getById[\"ir1\"].exec(\"UPDATE_CONTENTS_FIELD\", []);\r\n");
      out.write("\t\t\t/* $(\"#write_b\").submit(); */\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
